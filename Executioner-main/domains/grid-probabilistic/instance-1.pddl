(
  define
  (problem instance-1)
  (:domain grid)
  (:objects key7 node0-0 node1-4 node2-4 key6 node3-3 key1 node2-2 node2-0 node1-2 node0-3 node1-3 node3-4 node3-0 node4-2 node1-1 node4-1 node0-2 node4-4 node0-4 node1-0 node2-3 key4 diamond square node3-2 key2 node4-0 node4-3 circle key5 key3 node3-1 key8 node2-1 key0 triangle node0-1)
  (
    :init
    (shape triangle)
    (open node0-2)
    (place node4-1)
    (conn node3-4 node2-4)
    (key key3)
    (key-shape key5 triangle)
    (conn node2-1 node1-1)
    (shape circle)
    (open node1-2)
    (at key2 node0-4)
    (conn node4-1 node3-1)
    (conn node2-2 node2-3)
    (conn node0-0 node1-0)
    (locked node2-2)
    (conn node3-2 node4-2)
    (place node3-3)
    (conn node4-1 node4-0)
    (key key0)
    (conn node3-2 node2-2)
    (key key6)
    (conn node0-1 node0-0)
    (arm-empty)
    (key-shape key2 diamond)
    (conn node2-3 node3-3)
    (conn node1-3 node2-3)
    (conn node0-1 node1-1)
    (conn node4-3 node4-2)
    (conn node4-4 node3-4)
    (conn node1-4 node1-3)
    (open node0-4)
    (conn node2-1 node2-2)
    (open node2-4)
    (key-shape key8 triangle)
    (place node0-3)
    (locked node2-3)
    (key-shape key3 square)
    (lock-shape node3-2 square)
    (place node0-1)
    (at key5 node4-1)
    (conn node1-3 node0-3)
    (place node1-0)
    (conn node2-2 node3-2)
    (conn node4-3 node4-4)
    (conn node3-3 node3-4)
    (conn node1-2 node2-2)
    (conn node3-3 node2-3)
    (key key1)
    (open node2-0)
    (conn node2-4 node2-3)
    (conn node1-4 node0-4)
    (conn node2-4 node1-4)
    (conn node2-3 node2-4)
    (place node1-1)
    (conn node2-0 node3-0)
    (conn node4-2 node3-2)
    (conn node3-0 node3-1)
    (locked node3-2)
    (conn node2-0 node1-0)
    (conn node3-2 node3-1)
    (place node3-0)
    (shape diamond)
    (place node4-2)
    (conn node3-0 node2-0)
    (place node1-3)
    (key key5)
    (shape square)
    (conn node3-1 node2-1)
    (key-shape key6 triangle)
    (conn node2-3 node2-2)
    (conn node4-3 node3-3)
    (conn node2-3 node1-3)
    (key key2)
    (conn node3-4 node3-3)
    (conn node4-2 node4-1)
    (open node0-0)
    (open node4-0)
    (conn node0-3 node1-3)
    (at key0 node2-3)
    (lock-shape node4-4 square)
    (conn node1-2 node0-2)
    (open node4-1)
    (locked node4-3)
    (place node2-1)
    (conn node1-1 node2-1)
    (conn node0-2 node0-3)
    (lock-shape node2-2 square)
    (conn node3-4 node4-4)
    (key key7)
    (conn node1-2 node1-3)
    (conn node0-2 node0-1)
    (place node2-2)
    (conn node3-3 node4-3)
    (conn node3-1 node4-1)
    (lock-shape node3-3 square)
    (at key3 node0-2)
    (conn node4-2 node4-3)
    (lock-shape node4-2 square)
    (conn node3-0 node4-0)
    (place node3-1)
    (conn node3-1 node3-0)
    (place node1-4)
    (key key4)
    (at-robot node2-4)
    (key-shape key4 square)
    (conn node2-1 node2-0)
    (open node0-3)
    (place node2-3)
    (place node0-2)
    (conn node1-2 node1-1)
    (open node0-1)
    (open node1-0)
    (at key8 node2-2)
    (conn node3-1 node3-2)
    (conn node1-0 node2-0)
    (place node1-2)
    (conn node1-1 node1-2)
    (conn node0-3 node0-2)
    (locked node3-3)
    (at key4 node3-3)
    (locked node3-4)
    (open node1-1)
    (conn node2-2 node1-2)
    (conn node4-0 node4-1)
    (key key8)
    (place node3-2)
    (lock-shape node4-3 square)
    (place node0-4)
    (place node2-4)
    (conn node0-1 node0-2)
    (conn node4-0 node3-0)
    (lock-shape node3-4 square)
    (locked node4-4)
    (key-shape key0 triangle)
    (open node3-0)
    (at key7 node3-4)
    (key-shape key1 circle)
    (place node0-0)
    (conn node0-3 node0-4)
    (open node1-3)
    (place node2-0)
    (conn node3-3 node3-2)
    (conn node1-0 node0-0)
    (conn node1-4 node2-4)
    (conn node2-0 node2-1)
    (conn node1-3 node1-4)
    (place node3-4)
    (key-shape key7 circle)
    (conn node3-2 node3-3)
    (at key1 node1-3)
    (conn node2-1 node3-1)
    (conn node4-1 node4-2)
    (open node2-1)
    (place node4-3)
    (locked node4-2)
    (place node4-4)
    (conn node0-0 node0-1)
    (conn node1-3 node1-2)
    (conn node1-1 node0-1)
    (conn node4-4 node4-3)
    (lock-shape node2-3 square)
    (conn node0-4 node1-4)
    (conn node1-1 node1-0)
    (conn node0-2 node1-2)
    (conn node2-2 node2-1)
    (conn node2-4 node3-4)
    (at key6 node4-4)
    (open node3-1)
    (conn node0-4 node0-3)
    (open node1-4)
    (place node4-0)
    (conn node1-0 node1-1)
    (injected--0)
  )
  (
    :goal
    (
      and
      (at key0 node1-1)
      (injected--0)
    )
  )
)